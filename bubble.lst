; outline of bubble sort program
00000000 00100000 ldc 0x1000  
00000001 0000000B a2sp  
00000002 FFFFFF0A adj -1  
00000003 00000B00 ldc 11  
00000004 00000003 stl 0  
00000005 00004C00 ldc array 
00000006 0000010D call sort 
00000007 00000012 HALT  
; 
; Areg= return address 
; Breg= address of elements 
; SP+0= number of elements sort
; int* sort(int* in,int count)
;{
;	int x;
;	int y;
;	int temp;
;	for(x=0;x < count-1;x++)
;	{
;		for(y=1;y<count-x;y++)
;		{
;			if((*(in+y))>(*(in+y-1)))
;			{
;				temp=(*(in+y-1));
;				(*(in+y-1))=(*(in+y));
;				(*(in+y))=temp;
;			}
;		}
;	}
;	exit:return;
;} 
00000008 FFFFFF0A sort: adj -1 
00000009 00000003 stl 0 
;save return address
0000000A 00000203 stl 2 
;save address of elements
0000000B FFFFFD0A adj -3 
0000000C 00000000 ldc 0 
0000000D 00000003 stl 0 
;save temp
0000000E 00000100 ldc 1 
0000000F 00000103 stl 1 
;save y
00000010 00000000 ldc 0 
00000011 00000203 stl 2 
;save x
00000012 00000402 loop_out: ldl 4 
;load count
00000013 00000202 ldl 2 
;load x
00000014 00000007 sub 
;count - x
00000015 00000100 ldc 1 
00000016 00000007 sub 
;count-1-x
00000017 0000310F brz done 
00000018 00000100 ldc 1 
00000019 00000103 stl 1 
;y = 1
0000001A 00000402 loop_in: ldl 4 
;load count
0000001B 00000202 ldl 2 
;load x
0000001C 00000007 sub 
;count - x
0000001D 00000102 ldl 1 
;load y 
0000001E 00000007 sub  
;count - x -y
0000001F 0000210F brz addx 
00000020 00000502 ldl 5 
;load address of elements

;My code starts
00000021 00000102 ldl 1 
00000022 00000100 ldc 1 
00000023 00000007 sub 
00000024 00000502 ldl 5 
00000025 00000006 add 
00000026 00000603 stl 6 
00000027 00000102 ldl 1 
00000028 00000502 ldl 5 
00000029 00000006 add 
0000002A 00000703 stl 7 
;My code ends
0000002B 00000602 ldl 6 
0000002C 00000004 ldnl 0 
0000002D 00000702 ldl 7 
0000002E 00000004 ldnl 0 
0000002F 00000007 sub 
;array[y-1]-array[y]
00000030 00000110 brlz swap 
00000031 00000A11 br addy 
00000032 00000000 swap:  
00000032 00000602 ldl 6 
;load address of elements
00000033 00000004 ldnl 0 
;array[y-1]
00000034 00000003 stl 0 
;temp = array[y-1]
00000035 00000702 ldl 7 
00000036 00000004 ldnl 0 
;array[y]
00000037 00000602 ldl 6 
00000038 00000005 stnl 0 
;array[y-1] = array[y]
00000039 00000002 ldl 0 
;load temp
0000003A 00000702 ldl 7 
0000003B 00000005 stnl 0 
;array[y] = temp
;increment
0000003C 00000100 addy: ldc 1 
0000003D 00000102 ldl 1 
;load y
0000003E 00000006 add 
;y++
0000003F 00000103 stl 1 
;save y++
00000040 FFFFD911 br loop_in 
00000041 00000100 addx: ldc 1 
00000042 00000202 ldl 2 
;load x 
00000043 00000006 add 
;x++
00000044 00000203 stl 2 
00000045 00000100 ldc 1 
00000046 00000502 ldl 5 
00000047 00000006 add 
;array++
00000048 FFFFC911 br loop_out 
00000049 00000302 done: ldl 3 
;load return address
0000004A 0000050A adj 5 
;sp = array
0000004B 0000000E return 
;ok, 
0000004C 00000005 array: data 5  
0000004D 00000005 data 5  
0000004E 00000002 data 2  
0000004F 00000001 data 1  
00000050 00000008 data 8  
00000051 00000001 data 1  
00000052 00000001 data 1  
00000053 00000003 data 3  
00000054 00000004 data 4  
00000055 00000007 data 7  
